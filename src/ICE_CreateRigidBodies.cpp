/*
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.
   
   You should have received a copy of the GNU Lesser General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.html>.
   
   Author:     Helge Mathee      helge.mathee@gmx.net
   Company:    Studio Nest (TM)
   Date:       2010 / 09 / 21
*/

// MOM_GetContactPoints Plugin
// Initial code generated by Softimage SDK Wizard
// Executed Sun Sep 12 11:22:35 UTC+0100 2010 by helge-m
//
//
// Tip: You need to compile the generated code before you can load the plug-in.
// After you compile the plug-in, you can load it by clicking Update All in the Plugin Manager.
#include <xsi_application.h>
#include <xsi_dictionary.h>
#include <xsi_context.h>
#include <xsi_pluginregistrar.h>
#include <xsi_status.h>

#include <xsi_icenodecontext.h>
#include <xsi_icenodedef.h>
#include <xsi_command.h>
#include <xsi_factory.h>
#include <xsi_longarray.h>
#include <xsi_doublearray.h>
#include <xsi_math.h>
#include <xsi_vector2f.h>
#include <xsi_vector3f.h>
#include <xsi_vector4f.h>
#include <xsi_matrix3f.h>
#include <xsi_matrix4f.h>
#include <xsi_rotationf.h>
#include <xsi_quaternionf.h>
#include <xsi_color4f.h>
#include <xsi_shape.h>
#include <xsi_icegeometry.h>
#include <xsi_iceportstate.h>
#include <xsi_indexset.h>
#include <xsi_dataarray.h>
#include <xsi_dataarray2D.h>
#include <xsi_icenode.h>
#include <xsi_x3dobject.h>
#include <xsi_primitive.h>
#include <xsi_polygonmesh.h>
#include <xsi_geometryaccessor.h>
#include <xsi_point.h>
#include "Momentum.h"

#include "bulletSimulation.h"
#include <btBulletDynamicsCommon.h>
#include <BulletCollision/Gimpact/btGImpactShape.h>
#include <BulletCollision/CollisionShapes/btShapeHull.h>
#include "ICE_CreateRigidBodies.h"

// Defines port, group and map identifiers used for registering the ICENode
enum IDs
{
	ID_IN_id = 0,
	ID_IN_comp = 1,
	ID_IN_pos = 2,
	ID_IN_rot = 3,
	ID_IN_scl = 4,
	ID_IN_linvel = 5,
	ID_IN_angvel = 6,
	ID_IN_shape = 7,
	ID_IN_state = 8,
	ID_IN_mode = 9,
	ID_IN_mass = 10,
	ID_IN_bounce = 11,
	ID_IN_friction = 12,
	ID_IN_lindamp = 13,
	ID_IN_angdamp = 14,
	ID_IN_lintresh = 15,
	ID_IN_angtresh = 16,
	ID_IN_margin = 17,
	ID_G_100 = 100,
	ID_OUT_base = 200,
	ID_TYPE_CNS = 400,
	ID_STRUCT_CNS,
	ID_CTXT_CNS,
	ID_UNDEF = ULONG_MAX
};

using namespace XSI;
using namespace MATH;

CStatus Register_MOM_CreateRigidBodies( PluginRegistrar& in_reg )
{
	ICENodeDef nodeDef;
	nodeDef = Application().GetFactory().CreateICENodeDef(L"MOM_CreateRigidBodies",L"MOM_CreateRigidBodies");

	CStatus st;
	st = nodeDef.PutColor(255,188,102);
	st.AssertSucceeded( ) ;

	st = nodeDef.PutThreadingModel(XSI::siICENodeSingleThreading);
	st.AssertSucceeded( ) ;


	// Add input ports and groups.
	st = nodeDef.AddPortGroup(ID_G_100);
	st.AssertSucceeded( ) ;

	st = nodeDef.AddInputPort(ID_IN_id,ID_G_100,siICENodeDataLong,siICENodeStructureSingle,siICENodeContextComponent0D,L"ID",L"ID",0,0,10000000,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_comp,ID_G_100,siICENodeDataLong,siICENodeStructureSingle,siICENodeContextComponent0D,L"COMPOUND",L"COMPOUND",0,0,10000000,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_pos,ID_G_100,siICENodeDataVector3,siICENodeStructureSingle,siICENodeContextComponent0D,L"pos",L"pos",0,0,0,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_rot,ID_G_100,siICENodeDataVector3,siICENodeStructureSingle,siICENodeContextComponent0D,L"rot",L"rot",0,0,0,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_scl,ID_G_100,siICENodeDataVector3,siICENodeStructureSingle,siICENodeContextComponent0D,L"scl",L"scl",0,0,0,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_linvel,ID_G_100,siICENodeDataVector3,siICENodeStructureSingle,siICENodeContextComponent0D,L"linvel",L"linvel",0,0,0,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_angvel,ID_G_100,siICENodeDataVector3,siICENodeStructureSingle,siICENodeContextComponent0D,L"angvel",L"angvel",0,0,0,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_shape,ID_G_100,siICENodeDataShape,siICENodeStructureSingle,siICENodeContextComponent0D,L"shape",L"shape",0,0,0,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_state,ID_G_100,siICENodeDataLong,siICENodeStructureSingle,siICENodeContextComponent0D,L"state",L"state",0,0,2,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_mode,ID_G_100,siICENodeDataLong,siICENodeStructureSingle,siICENodeContextComponent0D,L"mode",L"mode",1,0,2,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_mass,ID_G_100,siICENodeDataFloat,siICENodeStructureSingle,siICENodeContextComponent0D,L"mass",L"mass",1.0f,0,100000,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_bounce,ID_G_100,siICENodeDataFloat,siICENodeStructureSingle,siICENodeContextComponent0D,L"bounce",L"bounce",0,0,1,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_friction,ID_G_100,siICENodeDataFloat,siICENodeStructureSingle,siICENodeContextComponent0D,L"friction",L"friction",0.9f,0,1,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_lindamp,ID_G_100,siICENodeDataFloat,siICENodeStructureSingle,siICENodeContextComponent0D,L"lindamp",L"lindamp",.3,0,1,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_angdamp,ID_G_100,siICENodeDataFloat,siICENodeStructureSingle,siICENodeContextComponent0D,L"angdamp",L"angdamp",.3,0,1,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_lintresh,ID_G_100,siICENodeDataFloat,siICENodeStructureSingle,siICENodeContextComponent0D,L"lintresh",L"lintresh",0.8f,0,1,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_angtresh,ID_G_100,siICENodeDataFloat,siICENodeStructureSingle,siICENodeContextComponent0D,L"angtresh",L"angtresh",1.0f,0,1,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;
	st = nodeDef.AddInputPort(ID_IN_margin,ID_G_100,siICENodeDataFloat,siICENodeStructureSingle,siICENodeContextComponent0D,L"margin",L"margin",0.0f,-1000.0f,1000.0f,ID_UNDEF,ID_UNDEF,ID_UNDEF);st.AssertSucceeded( ) ;

	// Add output ports.
	st = nodeDef.AddOutputPort(ID_OUT_base,siICENodeDataLong,siICENodeStructureSingle,siICENodeContextComponent0D,L"base",L"base",ID_UNDEF,ID_UNDEF,ID_UNDEF);
	st.AssertSucceeded( ) ;

	PluginItem nodeItem = in_reg.RegisterICENode(nodeDef);
	nodeItem.PutCategories(L"Custom ICENode");

	return CStatus::OK;
}

SICALLBACK MOM_CreateRigidBodies_Evaluate( ICENodeContext& in_ctxt )
{
   CValue udVal = in_ctxt.GetUserData();
   ICE_UD * p = (ICE_UD*)(CValue::siPtrType)udVal;

	// The current output port being evaluated...
	ULONG out_portID = in_ctxt.GetEvaluatedOutputPortID( );

	switch( out_portID )
	{
		case ID_OUT_base:
		{
		   if(gSimulation == NULL)
            return CStatus::OK;

         // temp vars
         CRotation rot;
         CQuaternion quat;
         CVector3f pos,angles,scl,linvel,angvel;

 			// Get the input data buffers for each port
			CDataArrayLong idData( in_ctxt, ID_IN_id );
			CDataArrayLong compData( in_ctxt, ID_IN_comp );
			CDataArrayVector3f posData( in_ctxt, ID_IN_pos );
			CDataArrayVector3f rotData( in_ctxt, ID_IN_rot );
			CDataArrayVector3f sclData( in_ctxt, ID_IN_scl );
			CDataArrayVector3f linvelData( in_ctxt, ID_IN_linvel );
			CDataArrayVector3f angvelData( in_ctxt, ID_IN_angvel );
			CDataArrayShape shapeData( in_ctxt, ID_IN_shape );
			CDataArrayLong stateData( in_ctxt, ID_IN_state );
			CDataArrayLong modeData( in_ctxt, ID_IN_mode );
			CDataArrayFloat massData( in_ctxt, ID_IN_mass);
			CDataArrayFloat bounceData( in_ctxt, ID_IN_bounce );
			CDataArrayFloat frictionData( in_ctxt, ID_IN_friction );
			CDataArrayFloat lindampData( in_ctxt, ID_IN_lindamp );
			CDataArrayFloat angdampData( in_ctxt, ID_IN_angdamp );
			CDataArrayFloat lintreshData( in_ctxt, ID_IN_lintresh );
			CDataArrayFloat angtreshData( in_ctxt, ID_IN_angtresh );
			CDataArrayFloat marginData( in_ctxt, ID_IN_margin);

			// For the output simply return the base ID
			CDataArrayLong outData( in_ctxt );

         // get the index set iterator
			CIndexSet indexSet( in_ctxt );
			LONG nbCreated = 0;
			for(CIndexSet::Iterator it = indexSet.Begin(); it.HasNext(); it.Next())
			{
			   // get the shape data
			   CShape shape = shapeData.IsConstant() ? shapeData[0] : shapeData[it];
			   // build the index set
			   rbdID shape_ID,rbd_ID;
			   // based on the shape type
			   if(shape.GetType() == siICEShapeInstance ||
               shape.GetType() == siICEShapeReference)
            {
               shape_ID.primary = shape.GetReferenceID();
               shape_ID.secondary = -1;
            }
            else
            {
               shape_ID.primary = p->base;
               shape_ID.secondary = (int)idData[it];
            }

            rbd_ID.primary = p->base;
            rbd_ID.secondary = (int)idData[it];

			   // ensure that the shape body exists
			   btCollisionShapeReference * shapeRef = gSimulation->GetCollisionShape(shape_ID);
			   if(shapeRef != NULL)
			   {
			      // we might have to destroy it in case
			      switch(shape.GetType())
			      {
			         case siICEShapeBox:
			         {
			            // if this is not a box!
			            if(shapeRef->shape->getShapeType() != 0)
			            {
			               gSimulation->DeleteCollisionShape(shape_ID);
			               gSimulation->DeleteRigidBody(rbd_ID);
			               shapeRef = NULL;
			            }
			            break;
			         }
			         case siICEShapeSphere:
			         {
			            if(shapeRef->shape->getShapeType() != 8)
			            {
			               gSimulation->DeleteCollisionShape(shape_ID);
			               gSimulation->DeleteRigidBody(rbd_ID);
			               shapeRef = NULL;
			            }
			            break;
			         }
			         case siICEShapeCylinder:
			         {
			            if(shapeRef->shape->getShapeType() != 13)
			            {
			               gSimulation->DeleteCollisionShape(shape_ID);
			               gSimulation->DeleteRigidBody(rbd_ID);
			               shapeRef = NULL;
			            }
			            break;
			         }
			         case siICEShapeReference:
			         case siICEShapeInstance:
			         {
			            break;
			         }
			      }
			   }

            // now if we don't have a shaperef anymore...!?
            // we might have to create the shape
            if(shapeRef == NULL)
            {
               // create the shape
			      switch(shape.GetType())
			      {
			         case siICEShapeBox:
			         {
			            // create the box shape
			            shapeRef = new btCollisionShapeReference();
			            shapeRef->shape = new btBoxShape(btVector3(1,1,1));
			            gSimulation->AddCollisionShape(shape_ID,shapeRef);
			            break;
			         }
			         case siICEShapeSphere:
			         {
			            shapeRef = new btCollisionShapeReference();
			            shapeRef->shape = new btSphereShape(1);
			            gSimulation->AddCollisionShape(shape_ID,shapeRef);
			            break;
			         }
			         case siICEShapeCylinder:
			         {
			            shapeRef = new btCollisionShapeReference();
			            shapeRef->shape = new btCylinderShape(btVector3(1,1,2));
			            gSimulation->AddCollisionShape(shape_ID,shapeRef);
			            break;
			         }
			         case siICEShapeReference:
			         case siICEShapeInstance:
			         {
			            // get the object from the reference ID
			            int refID = shape.GetReferenceID();
                     int mode = modeData.IsConstant() ? modeData[0] : modeData[it];

                     X3DObject obj3d(Application().GetObjectFromID(refID));
                     if(obj3d.IsValid() && obj3d.GetType().IsEqualNoCase(L"polymsh"))
                     {
                        PolygonMesh mesh = obj3d.GetActivePrimitive().GetGeometry();
                        shapeRef = new btCollisionShapeReference();
                        if(mode == 0) // btBoxShape
                        {
                           CVector3Array pos = mesh.GetPoints().GetPositionArray();

                           btVector3 bbMin(100000,100000,100000);
                           btVector3 bbMax(-100000,-100000,-100000);

                           for(LONG i=0;i<pos.GetCount();i++)
                           {
                              // merge the bbox
                              CVector3 p1(pos[i]);
                              if(p1.GetX() < bbMin.getX())bbMin.setX(p1.GetX());
                              if(p1.GetY() < bbMin.getY())bbMin.setY(p1.GetY());
                              if(p1.GetZ() < bbMin.getZ())bbMin.setZ(p1.GetZ());
                              if(p1.GetX() > bbMax.getX())bbMax.setX(p1.GetX());
                              if(p1.GetY() > bbMax.getY())bbMax.setY(p1.GetY());
                              if(p1.GetZ() > bbMax.getZ())bbMax.setZ(p1.GetZ());
                           }

                           btVector3 scale = (bbMax - bbMin) * .5;
                           btVector3 center = (bbMin + bbMax) * .5;
                           btTransform offset;
                           offset.setIdentity();
                           offset.setOrigin(center);

                           btBoxShape * boxShape = new btBoxShape(scale);
                           btCompoundShape * compShape = new btCompoundShape();
                           compShape->addChildShape(offset,boxShape);

                           shapeRef->shape = compShape;
                        }
                        else if(mode == 1) // btConvexHullShape (shapetype 4)
                        {
                           CVector3Array pos = mesh.GetPoints().GetPositionArray();

                           btConvexHullShape * complexShape = new btConvexHullShape();
                           for(LONG i=0;i<pos.GetCount();i++)
                              complexShape->addPoint(btVector3(pos[i].GetX(),pos[i].GetY(),pos[i].GetZ()));

                           shapeRef->shape = complexShape;
                        }
                        else if(mode == 2) // btGImpactShape (shapetype 5)
                        {
                           CGeometryAccessor acc = mesh.GetGeometryAccessor(siConstructionModeSecondaryShape);

                           // get the mesh data
                           CLongArray indices;
                           acc.GetTriangleVertexIndices(indices);
                           CDoubleArray positions;
                           acc.GetVertexPositions(positions);

                           shapeRef->triId = (int*)malloc(sizeof(int)*indices.GetCount());
                           shapeRef->triPos = (btScalar*)malloc(sizeof(btScalar)*positions.GetCount());

                            // copy the data
                           for(int i=0;i<indices.GetCount();i++)
                              shapeRef->triId[i] = indices[i];
                           for(int i = 0; i<positions.GetCount();i++)
                              shapeRef->triPos[i] = positions[i];

                           shapeRef->tris = new btTriangleIndexVertexArray(
                              indices.GetCount() / 3,shapeRef->triId,3*sizeof(int),
                              positions.GetCount() / 3, shapeRef->triPos,3*sizeof(btScalar));

                           btGImpactMeshShape * trimesh = new btGImpactMeshShape(shapeRef->tris);
                           trimesh->updateBound();

                           shapeRef->shape = trimesh;
                        }
                     }

			            break;
			         }
			         default:
			         {
			            break;
			         }
			      }
            }

            // only look for the rdb if we have a shape
			   if(shapeRef == NULL)
               continue;

			   btRigidBodyReference * bodyRef = gSimulation->GetRigidBody(rbd_ID);
			   if(bodyRef == NULL)
			   {
			      // create the rbd!
			      bodyRef = new btRigidBodyReference();

               pos = posData.IsConstant() ? posData[0] : posData[it];
               angles = rotData.IsConstant() ? rotData[0] : rotData[it];
               scl = sclData.IsConstant() ? sclData[0] : sclData[it];
               rot.SetFromXYZAngles(DegreesToRadians(angles.GetX()),DegreesToRadians(angles.GetY()),DegreesToRadians(angles.GetZ()));
               quat = rot.GetQuaternion();
               linvel = linvelData.IsConstant() ? linvelData[0] : linvelData[it];
               angvel = angvelData.IsConstant() ? angvelData[0] : angvelData[it];

			      // set the scaling on the compound shape
			      shapeRef->shape->setLocalScaling(btVector3(scl.GetX(),scl.GetY(),scl.GetZ()));
               shapeRef->shape->setMargin(marginData.IsConstant() ? marginData[0] : marginData[it]);

               // create the transform of the particle
               btTransform transform;
               transform.setIdentity();
               transform.setOrigin(btVector3(pos.GetX(),pos.GetY(),pos.GetZ()));
               transform.setRotation(btQuaternion(quat.GetX(),quat.GetY(),quat.GetZ(),quat.GetW()));

               // create the motion state
               btDefaultMotionState* motionState = new btDefaultMotionState(transform);

               // compute the inertia
               bodyRef->mass = massData[it];
               btVector3 inertia(0,0,0);
               if(bodyRef->mass > 0.0f)
                  shapeRef->shape->calculateLocalInertia(bodyRef->mass,inertia);

               // create the rigid body
               btRigidBody::btRigidBodyConstructionInfo rbInfo(bodyRef->mass,motionState,shapeRef->shape,inertia);
               rbInfo.m_friction = frictionData.IsConstant() ? frictionData[0] : frictionData[it];
               rbInfo.m_restitution = bounceData.IsConstant() ? bounceData[0] : bounceData[it];
               bodyRef->body = new btRigidBody(rbInfo);

               bodyRef->body->setLinearVelocity(btVector3(linvel.GetX(),linvel.GetY(),linvel.GetZ()));
               bodyRef->body->setAngularVelocity(btVector3(angvel.GetX(),angvel.GetY(),angvel.GetZ()));

               // get the right state
               int state = DISABLE_DEACTIVATION;
               if(stateData[it] == 1)
               {
                  state = WANTS_DEACTIVATION;
               }
               else if(stateData[it] == 2)
               {
                  state = DISABLE_SIMULATION;
               }
               bodyRef->body->setActivationState(state);

               //Set the sleeping thresholds
               bodyRef->body->setSleepingThresholds(
                  lintreshData.IsConstant() ? lintreshData[0] : lintreshData[it],
                  angtreshData.IsConstant() ? angtreshData[0] : angtreshData[it]);

               //Set damping params
               bodyRef->body->setDamping(
                  lindampData.IsConstant() ? lindampData[0] : lindampData[it],
                  angdampData.IsConstant() ? angdampData[0] : angdampData[it]);

               //add the body to the dynamics world
               gSimulation->AddRigidBody(rbd_ID,bodyRef);
               nbCreated++;
			   }

            outData[it] = (LONG)p->base;
			}

         //Application().LogMessage(L"[MOMENTUM] Created "+CValue(nbCreated).GetAsText()+L" rigidbodies for dbID "+CValue((LONG)p->base).GetAsText(),siVerboseMsg);
		}
		break;
	};

	return CStatus::OK;
}

SICALLBACK MOM_CreateRigidBodies_Init( CRef& in_ctxt )
{
   gInstanceCount++;
	Context ctxt( in_ctxt );
   ICENode node(ctxt.GetSource());

   // inject the dbid of the operator into
   // the userdata of the operator
   ICE_UD * p = new ICE_UD;
   p->base = (int)node.GetObjectID();
   CValue val = (CValue::siPtrType) p;
   ctxt.PutUserData( val ) ;

   // see if we have a simulation
   if(gSimulation == NULL)
      gSimulation = new bulletSimulation();
   return CStatus::OK;
}

SICALLBACK MOM_CreateRigidBodies_Term( CRef& in_ctxt )
{
   gInstanceCount--;
	Context ctxt( in_ctxt );

   CValue udVal = ctxt.GetUserData();
   ICE_UD * p = (ICE_UD*)(CValue::siPtrType)udVal;
   if(gSimulation->DeleteAllCollisionShapes(rbdID(p->base,-1)))
      Application().LogMessage(L"[MOMENTUM] Destroyed the collision shape for dbID "+CValue((LONG)p->base).GetAsText(),siVerboseMsg);
   if(gSimulation->DeleteAllRigidBodies(rbdID(p->base,-1)))
      Application().LogMessage(L"[MOMENTUM] Destroyed the rigidbody for dbID "+CValue((LONG)p->base).GetAsText(),siVerboseMsg);
   delete p;

   if(gInstanceCount == 0)
   {
      delete(gSimulation);
      gSimulation = NULL;
      Application().LogMessage(L"[MOMENTUM] Destroyed the simulation world.",siVerboseMsg);
   }

	return CStatus::OK;
}
